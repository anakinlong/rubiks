
- a "Colour" class, which is just a 3x1 list
    - .show() brings up a small cv2 window of that colour
    - .plot() brings up a 3d pyplot figure with that colour plotted
- a "Pallete" class, which is just a dictionary but with .names() and .rgbvalues() methods that return lists
    - .plot() brings up a 3d pyplot figure with each colour plotted
- an "Image" class, which is just a cv2.Mat but with .show(), .scale() / other useful methods
- the ability to give a colour mapping to transform an image (ie. one rubiks colour to another)
- change the pallete weights so that bigger => more of that colour (ie. just change it to 1 / w)
- some method of optimising the pallete weights
- aggregating shades in original image (ie. just lower the colour bits)
- allow combinations of rubiks colours (an have them in a chequered pattern)
- an image transform module, containing:
    - a "GenericTransform" class, which is a generic class to manipulate an image
    - a "Recolour" class (inherit from GenericTransform) with lots of different methods for each algorithm (including mapping colours)
    - a "Resize" class (inherit from traGenericTransformnsform) with lots of different methods for each algorithm
